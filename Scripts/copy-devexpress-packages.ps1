# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ DevExpress –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π feed
# Copy DevExpress packages to local feed

param(
    [string]$DevExpressVersion = "23.2.3",
    [string]$SourcePath = "",
    [switch]$Force = $false
)

$ErrorActionPreference = "Stop"
$LocalPackagesPath = Join-Path $PSScriptRoot "..\LocalPackages"

Write-Host "üîç –ü–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–æ–≤ DevExpress..." -ForegroundColor Green

# –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –ø–∞–∫–µ—Ç–∞–º DevExpress
$PossiblePaths = @(
    "C:\Program Files (x86)\DevExpress $($DevExpressVersion.Substring(0,4))\Components\Bin\Framework",
    "C:\Program Files\DevExpress $($DevExpressVersion.Substring(0,4))\Components\Bin\Framework",
    "$env:USERPROFILE\.nuget\packages",
    "$env:ProgramData\Microsoft\VisualStudio\Packages"
)

if ($SourcePath) {
    $PossiblePaths = @($SourcePath) + $PossiblePaths
}

# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
$RequiredPackages = @(
    "DevExpress.Win.Design.$DevExpressVersion.nupkg",
    "DevExpress.Office.Core.$DevExpressVersion.nupkg",
    "DevExpress.Utils.$DevExpressVersion.nupkg",
    "DevExpress.Win.$DevExpressVersion.nupkg"
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (-not (Test-Path $LocalPackagesPath)) {
    New-Item -ItemType Directory -Path $LocalPackagesPath -Force | Out-Null
    Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $LocalPackagesPath" -ForegroundColor Green
}

# –ü–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–æ–≤
$FoundPackages = @{}
$SearchPaths = @()

foreach ($path in $PossiblePaths) {
    if (Test-Path $path) {
        $SearchPaths += $path
        Write-Host "üîç –ü–æ–∏—Å–∫ –≤: $path" -ForegroundColor Yellow

        foreach ($package in $RequiredPackages) {
            if (-not $FoundPackages.ContainsKey($package)) {
                $packagePath = Get-ChildItem -Path $path -Name $package -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
                if ($packagePath) {
                    $fullPath = Join-Path $path $packagePath
                    $FoundPackages[$package] = $fullPath
                    Write-Host "‚úÖ –ù–∞–π–¥–µ–Ω: $package" -ForegroundColor Green
                }
            }
        }
    }
}

Write-Host "`nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:" -ForegroundColor Cyan
Write-Host "–ù–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: $($FoundPackages.Count) –∏–∑ $($RequiredPackages.Count)" -ForegroundColor Cyan

if ($FoundPackages.Count -eq 0) {
    Write-Host "‚ùå –ü–∞–∫–µ—Ç—ã DevExpress –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!" -ForegroundColor Red
    Write-Host "`n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:" -ForegroundColor Yellow
    Write-Host "1. DevExpress –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Yellow
    Write-Host "2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è ($DevExpressVersion)" -ForegroundColor Yellow
    Write-Host "3. –ü–∞–∫–µ—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ" -ForegroundColor Yellow
    Write-Host "`n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:" -ForegroundColor Yellow
    Write-Host "- –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é: -SourcePath 'C:\Path\To\DevExpress'" -ForegroundColor Yellow
    Write-Host "- –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é: -DevExpressVersion '23.1.5'" -ForegroundColor Yellow
    exit 1
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
Write-Host "`nüì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..." -ForegroundColor Green
$CopiedCount = 0

foreach ($packageName in $FoundPackages.Keys) {
    $sourcePath = $FoundPackages[$packageName]
    $destPath = Join-Path $LocalPackagesPath $packageName

    if ((Test-Path $destPath) -and -not $Force) {
        Write-Host "‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): $packageName" -ForegroundColor Yellow
        $CopiedCount++
    } else {
        try {
            Copy-Item -Path $sourcePath -Destination $destPath -Force
            Write-Host "‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $packageName" -ForegroundColor Green
            $CopiedCount++
        } catch {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è $packageName : $_" -ForegroundColor Red
        }
    }
}

Write-Host "`nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green
Write-Host "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: $CopiedCount –ø–∞–∫–µ—Ç–æ–≤" -ForegroundColor Green
Write-Host "–ü—É—Ç—å: $LocalPackagesPath" -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
$LocalPackages = Get-ChildItem -Path $LocalPackagesPath -Name "*.nupkg"
if ($LocalPackages) {
    Write-Host "`nüìã –ü–∞–∫–µ—Ç—ã –≤ LocalPackages:" -ForegroundColor Cyan
    foreach ($pkg in $LocalPackages) {
        Write-Host "   üì¶ $pkg" -ForegroundColor White
    }
} else {
    Write-Host "`n‚ö†Ô∏è  –í LocalPackages –Ω–µ—Ç .nupkg —Ñ–∞–π–ª–æ–≤" -ForegroundColor Yellow
}

Write-Host "`nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
Write-Host "1. –î–æ–±–∞–≤—å—Ç–µ LocalPackages/* –≤ .gitignore (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ)" -ForegroundColor White
Write-Host "2. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: dotnet build" -ForegroundColor White
Write-Host "3. –î–ª—è GitHub Actions –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã —Å –ø–∞–∫–µ—Ç–∞–º–∏" -ForegroundColor White

