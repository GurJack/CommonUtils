# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ NuGet –ø–∞–∫–µ—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ
param(
    [Parameter(Mandatory=$false)]
    [string]$TestMode = "dry-run"
)

Write-Host "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ NuGet –ø–∞–∫–µ—Ç–æ–≤..." -ForegroundColor Green
Write-Host "–†–µ–∂–∏–º: $TestMode" -ForegroundColor Yellow

$solutionPath = "CommonUtils\CommonUtils.sln"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è solution —Ñ–∞–π–ª–∞
if (!(Test-Path $solutionPath)) {
    Write-Host "‚ùå –§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: $solutionPath" -ForegroundColor Red
    exit 1
}

Write-Host "üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–µ—à–µ–Ω–∏—è: $solutionPath" -ForegroundColor Green

try {
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
    if (Test-Path "nupkg") {
        Write-Host "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤..." -ForegroundColor Yellow
        Remove-Item "nupkg" -Recurse -Force
    }

    # Restore –∏ Build
    Write-Host "üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞..." -ForegroundColor Yellow
    & dotnet restore $solutionPath
    if ($LASTEXITCODE -ne 0) { throw "–û—à–∏–±–∫–∞ –ø—Ä–∏ restore" }

    & dotnet build $solutionPath --configuration Release --no-restore
    if ($LASTEXITCODE -ne 0) { throw "–û—à–∏–±–∫–∞ –ø—Ä–∏ build" }

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    $version = "1.0.0-test-$(Get-Date -Format 'yyyyMMddHHmm')"
    Write-Host "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –≤–µ—Ä—Å–∏–∏: $version" -ForegroundColor Yellow

    # Pack –ø–∞–∫–µ—Ç–æ–≤
    $projects = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { $_.FullName -notmatch 'test|Test' }
    foreach ($project in $projects) {
        Write-Host "üì¶ –£–ø–∞–∫–æ–≤–∫–∞: $($project.Name)" -ForegroundColor Cyan
        & dotnet pack $project.FullName --configuration Release -p:PackageVersion=$version --output nupkg
        if ($LASTEXITCODE -ne 0) { throw "–û—à–∏–±–∫–∞ –ø—Ä–∏ pack $($project.Name)" }
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    $packages = Get-ChildItem -Path nupkg -Filter *.nupkg
    if ($packages.Count -eq 0) {
        throw "–ü–∞–∫–µ—Ç—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!"
    }

    Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–∞–∫–µ—Ç—ã:" -ForegroundColor Green
    foreach ($package in $packages) {
        Write-Host "  - $($package.Name)" -ForegroundColor White
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ NuGet –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    Write-Host "`nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ NuGet –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤..." -ForegroundColor Yellow
    & dotnet nuget list source

    if ($TestMode -eq "dry-run") {
        Write-Host "`nüîç –†–µ–∂–∏–º dry-run: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" -ForegroundColor Yellow
        Write-Host "–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä: -TestMode publish" -ForegroundColor Yellow
    } elseif ($TestMode -eq "publish") {
        Write-Host "`n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –æ–ø—É–±–ª–∏–∫—É–µ—Ç –ø–∞–∫–µ—Ç—ã –≤ GitHub Packages!" -ForegroundColor Red
        $confirmation = Read-Host "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)"
        if ($confirmation -eq "y" -or $confirmation -eq "Y") {
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –æ–Ω –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
            Write-Host "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" -ForegroundColor Red
        } else {
            Write-Host "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" -ForegroundColor Yellow
        }
    }

    Write-Host "`nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green

} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
