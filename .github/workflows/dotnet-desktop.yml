name: .NET NuGet Package CI

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  SOLUTION_PATH: CommonUtils/CommonUtils.sln
  GITHUB_PACKAGES_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

jobs:
  build-and-pack:
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Clean NuGet configuration
      run: |
        # Очищаем любые локальные конфиги с credentials чтобы избежать конфликтов
        if (Test-Path "nuget.config.user") {
          Remove-Item "nuget.config.user" -Force
          Write-Host "Removed local nuget.config.user file"
        }
        # Очищаем глобальные конфигурации NuGet
        dotnet nuget locals all --clear

    - name: Configure GitHub Packages source
      run: |
        # Удаляем источник, если он уже существует
        dotnet nuget remove source "github" || true
        dotnet nuget remove source "github-packages" || true
        # Добавляем источник GitHub Packages с аутентификацией
        dotnet nuget add source ${{ env.GITHUB_PACKAGES_URL }} -n github -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
        # Проверка добавленного источника
        dotnet nuget list source

    - name: Restore dependencies
      run: dotnet restore $env:SOLUTION_PATH

    - name: Build
      run: dotnet build $env:SOLUTION_PATH --configuration Release --no-restore

    - name: Test
      run: dotnet test $env:SOLUTION_PATH --configuration Release --no-build --verbosity normal

    - name: Set Package Version
      run: |
        if ($env:GITHUB_REF -match '^refs/tags/v(.+)$') {
          $version = $matches[1]
          echo "PACKAGE_VERSION=$version" >> $env:GITHUB_ENV
          echo "Building release version: $version"
        } else {
          $version = "1.0.0-ci-${{ github.run_number }}"
          echo "PACKAGE_VERSION=$version" >> $env:GITHUB_ENV
          echo "Building CI version: $version"
        }

    - name: Pack NuGet packages
      run: |
        $projects = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { $_.FullName -notmatch 'test|Test' }
        foreach ($project in $projects) {
          Write-Host "Packing $($project.Name) with version $env:PACKAGE_VERSION"
          dotnet pack $project.FullName --configuration Release -p:PackageVersion=$env:PACKAGE_VERSION --output nupkg
        }

    - name: List files in nupkg directory
      run: ls  nupkg/

    - name: Verify packages were created
      run: |
        if (!(Test-Path nupkg/*.nupkg)) {
          Write-Error "No nupkg files found!"
          exit 1
        }


    - name: Publish to GitHub Packages
      run: |
        $packages = Get-ChildItem -Path nupkg -Filter *.nupkg
        foreach ($package in $packages) {
          Write-Host "Publishing $($package.Name)"
          dotnet nuget push $package.FullName --source "github" --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
        }
