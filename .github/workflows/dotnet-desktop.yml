name: .NET NuGet Package CI (with DevExpress projects)

# Этот workflow собирает и публикует NuGet пакеты для всех проектов
# Включая CommonForms с использованием DevExpress пакетов из секретов

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  SOLUTION_PATH: CommonUtils/CommonUtils.sln
  GITHUB_PACKAGES_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

jobs:
  build-and-pack:
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Prepare DevExpress packages
      run: |
        # Создаем папку для локальных пакетов
        $localPackagesPath = "$(Get-Location)\LocalPackages"
        if (-not (Test-Path $localPackagesPath)) {
          New-Item -ItemType Directory -Path $localPackagesPath -Force | Out-Null
          Write-Host "✅ Создана папка: $localPackagesPath"
        }

        # Распаковываем DevExpress пакеты из секретов (если доступны)
        $devExpressPackages = @(
          "DevExpress.Win.Design.23.2.3.nupkg",
          "DevExpress.Office.Core.23.2.3.nupkg",
          "DevExpress.Utils.23.2.3.nupkg",
          "DevExpress.Win.23.2.3.nupkg"
        )

        $hasDevexpressSecrets = $false
        foreach ($package in $devExpressPackages) {
          $secretName = $package.Replace(".", "_").Replace("-", "_")
          $secretValue = "${{ secrets.$secretName }}"

          # Проверяем, есть ли секрет
          if ($secretValue -and $secretValue -ne "${{ secrets.$secretName }}") {
            # Декодируем base64 и сохраняем пакет
            $bytes = [Convert]::FromBase64String($secretValue)
            $filePath = Join-Path $localPackagesPath $package
            [IO.File]::WriteAllBytes($filePath, $bytes)
            Write-Host "✅ Распакован пакет: $package"
            $hasDevexpressSecrets = $true
          }
        }

        if ($hasDevexpressSecrets) {
          Write-Host "✅ Все DevExpress пакеты успешно распакованы"
          "HAS_DEVEXPRESS=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        } else {
          Write-Host "❌ DevExpress пакеты не найдены в секретах"
          "HAS_DEVEXPRESS=false" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
        }

    - name: Configure NuGet sources
      run: |
        # Удаляем существующие источники GitHub Packages
        dotnet nuget remove source "github" 2>$null || true
        dotnet nuget remove source "github-packages" 2>$null || true
        dotnet nuget remove source "local-packages" 2>$null || true

        # Добавляем источник для локальных пакетов
        $localPackagesPath = "$(Get-Location)\LocalPackages"
        Write-Host "Adding local packages source: $localPackagesPath"
        dotnet nuget add source $localPackagesPath -n "local-packages"

        # Добавляем источник GitHub Packages с аутентификацией
        Write-Host "Adding GitHub Packages source: ${{ env.GITHUB_PACKAGES_URL }}"
        dotnet nuget add source "${{ env.GITHUB_PACKAGES_URL }}" -n "github-packages" -u "${{ github.actor }}" -p "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text

        # Проверка добавленных источников
        Write-Host "Configured NuGet sources:"
        dotnet nuget list source

    - name: Restore dependencies
      run: |
        Write-Host "Восстанавливаем зависимости для всех проектов"
        dotnet restore "$env:SOLUTION_PATH"

    - name: Build
      run: |
        dotnet build "$env:SOLUTION_PATH" --configuration Release --no-restore

    - name: Test
      run: |
        dotnet test "$env:SOLUTION_PATH" --configuration Release --no-build --verbosity normal

    - name: Set Package Version
      run: |
        if ("${{ github.ref }}" -match '^refs/tags/v(.+)$') {
          $version = $matches[1]
          "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "Building release version: $version"
        } else {
          $version = "1.0.0-ci-${{ github.run_number }}"
          "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "Building CI version: $version"
        }

    - name: Pack NuGet packages
      run: |
        Write-Host "Пакуем все проекты (включая CommonForms)"
        $projects = Get-ChildItem -Recurse -Filter *.csproj | Where-Object {
          $_.FullName -notmatch 'test|Test'
        }
        foreach ($project in $projects) {
          Write-Host "Packing $($project.Name) with version $env:PACKAGE_VERSION"
          dotnet pack $project.FullName --configuration Release -p:PackageVersion=$env:PACKAGE_VERSION --output nupkg
        }

    - name: List files in nupkg directory
      run: ls  nupkg/

    - name: Verify packages were created
      run: |
        if (!(Test-Path nupkg/*.nupkg)) {
          Write-Error "No nupkg files found!"
          exit 1
        }

        # Проверяем, что URL доступен
        Write-Host "GitHub Packages URL: ${{ env.GITHUB_PACKAGES_URL }}"
        Write-Host "GitHub Actor: ${{ github.actor }}"

        # Проверяем настройки NuGet
        dotnet nuget list source


    - name: Publish to GitHub Packages
      run: |
        $packages = Get-ChildItem -Path nupkg -Filter *.nupkg
        foreach ($package in $packages) {
          Write-Host "Publishing $($package.Name)"
          dotnet nuget push $package.FullName --source "${{ env.GITHUB_PACKAGES_URL }}" --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
        }

    - name: Cleanup
      if: always()
      run: |
        Write-Host "Очистка завершена"
