<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonUtils</name>
    </assembly>
    <members>
        <member name="T:CommonUtils.Extensions.ActionExtension">
            <summary>
             Расширение StopWatch
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.ActionExtension.GetElapsedTime(System.Action)">
            <summary>
             Возврашает время затраченное на выполнение дейтсвия (через Stopwatch)
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtils.Extensions.DictionaryExtension">
            <summary>
            Extension methods for IDictionary types
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.DictionaryExtension.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the default value if the value by key was not found
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.DictionaryExtension.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Adds range to original dictionary.
            </summary>
        </member>
        <member name="T:CommonUtils.Extensions.EnumerableExtension">
            <summary>
            Enumerable extension
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.EnumerableExtension.AsObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert IEnumerable to ObservableCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.EnumerableExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if enumerable is null or empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.EnumerableExtension.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Fisher-Yates shuffle.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.EnumerableExtension.HasItems``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if collection has items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.EnumerableExtension.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if collection is empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute action for each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:CommonUtils.Extensions.EnumerableExtension.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split into batches
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.EnumerableExtension.SafeWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Safe where filter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtils.Extensions.ListExtention">
            <summary>
            The class of list extentions.
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.ListExtention.Move``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Move the element from old position to new position.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
        </member>
        <member name="M:CommonUtils.Extensions.ListExtention.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split enumerable into chunks
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="chunkSize"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtils.Extensions.ObjectExtension">
            <summary>
            Object extensions
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.In``1(``0,``0[])">
            <summary>
            Check if object is in values list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.IsNull(System.Object)">
            <summary>
            Check if object is null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.IsNotNull(System.Object)">
            <summary>
            Check if object is not null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.WhoseThere(System.Object,System.String,System.String,System.Int32)">
            <summary>
            Get caller information
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <param name="fileName"></param>
            <param name="lineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.MapTo``1(System.Object)">
            <summary>
            Map object to target type
            </summary>
            <param name="obj"></param>
            <typeparam name="TTarget"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.ToJson(System.Object)">
            <summary>
            Convert object to JSON string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.IfNull``1(``0,``0)">
            <summary>
            Return default value if object is null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.IfNull(System.String,System.String)">
            <summary>
            Return default value if string is null
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.CloneObject``1(``0)">
            <summary>
            Clone object using JSON serialization
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.SafeCast``1(System.Object)">
            <summary>
            Safe cast to target type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.ObjectExtension.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get property value by name
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtils.Extensions.StringExtension">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.FirstLetterToUpper(System.String)">
            <summary>
            Return string with FirstLetterToUpper.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.ToTitleCase(System.String)">
            <summary>
            Convert string to title case
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.IsNullOrEmpty(System.String)">
            <summary>
            Check if string is null or empty
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.GetFirstName(System.String)">
            <summary>
            Gets the first attribute name (before first point).
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The first attribute name.</returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.GetLastName(System.String)">
            <summary>
            Gets the last attribute name (after last point).
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The last attribute name.</returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.ToMd5(System.String)">
            <summary>
            Generate MD5 hash from string
            </summary>
            <param name="input">Input string</param>
            <returns>MD5 hash string</returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
            Check if string is null or whitespace
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.Left(System.String,System.Int32)">
            <summary>
            Get left part of string
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.Right(System.String,System.Int32)">
            <summary>
            Get right part of string
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.IsNumeric(System.String)">
            <summary>
            Check if string is numeric
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.IsValidEmail(System.String)">
            <summary>
            Check if string is valid email
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.ToBase64(System.String)">
            <summary>
            Convert string to Base64
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.StringExtension.FromBase64(System.String)">
            <summary>
            Convert Base64 string to normal string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtils.Extensions.TypeExtension">
            <summary>
            Type extensions.
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.TypeExtension.IsNullableType(System.Type)">
            <summary>
            Determinates is the type nullable.
            </summary>
            <param name="theType"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Extensions.TypeExtension.GetRealType(System.Type)">
            <summary>
            Gets the real type: if type is nullable it will be underlying type.
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.TypeExtension.IsSubclassOrEqual(System.Type,System.Type)">
            <summary>
            Determines whether the current System.Type derives from the specified System.Type or equal to it.
            </summary>
        </member>
        <member name="M:CommonUtils.Extensions.TypeExtension.IsSubclassOrEqualFromGenericType(System.Type,System.Type)">
            <summary>
            Determines whether the current generic System.Type derives from the specified generic System.Type or equal to it.
            </summary>
        </member>
        <member name="T:CommonUtils.GlobalConstant">
            <summary>
            Глобальные константы и настройки приложения
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.ApplicationName">
            <summary>
            Имя приложения
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.Version">
            <summary>
            Версия приложения
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.DefaultConnectionString">
            <summary>
            Строка подключения по умолчанию
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.DateTimeFormat">
            <summary>
            Формат даты и времени
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.DateFormat">
            <summary>
            Формат даты
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.TimeFormat">
            <summary>
            Формат времени
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.DefaultEncoding">
            <summary>
            Кодировка по умолчанию
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.MaxRetryAttempts">
            <summary>
            Максимальное количество попыток
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.DefaultTimeout">
            <summary>
            Таймаут по умолчанию
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.TempDirectory">
            <summary>
            Временная директория
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.LogDirectory">
            <summary>
            Директория логов
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.AppDataPath">
            <summary>
            Путь к каталогу данных приложения
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.APIKey">
            <summary>
            Ключ API по умолчанию, используется для шифрования при отключенной БД
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.UseDataBase">
            <summary>
            Флаг использования базы данных
            </summary>
            <remarks>
            Если true - настройки хранятся в БД
            Если false - настройки хранятся в файле
            </remarks>
        </member>
        <member name="P:CommonUtils.GlobalConstant.MainFormName">
            <summary>
            Название главной формы приложения
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.DatabaseFilePath">
            <summary>
            Путь к файлу базы данных (актуально при UseDataBase = true)
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.DatabaseName">
            <summary>
            Название базы данных (актуально при UseDataBase = true)
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.DatabaseDirectoryPath">
            <summary>
            Путь к файлу базы данных (актуально при UseDataBase = true)
            </summary>
        </member>
        <member name="P:CommonUtils.GlobalConstant.SettingsFilePath">
            <summary>
            Путь к файлу настроек (актуально при UseDataBase = false)
            </summary>
        </member>
        <member name="M:CommonUtils.GlobalConstant.GetConnectionString">
            <summary>
            Получает строку подключения к базе данных
            </summary>
        </member>
        <member name="T:CommonUtils.Objects.LocalizableStringExtensions">
            <summary>
            LocalizableString extensions
            </summary>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableStringExtensions.AsLocalizableString(System.String)">
            <summary>
            String AsLocalizableString
            </summary>
            <param name="s"></param>
            <returns></returns> 
        </member>
        <member name="T:CommonUtils.Objects.LocalizableString">
            <summary>
            Multi-languages string
            </summary>
        </member>
        <member name="F:CommonUtils.Objects.LocalizableString.DefaultLanguageKey">
            <summary>
            DefaultLanguageKey
            </summary>
        </member>
        <member name="P:CommonUtils.Objects.LocalizableString.HaveMultipleLanguages">
            <summary>
            HaveMultipleLanguages
            </summary>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="originalString"></param>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToString(System.String)">
            <summary>
            ToString for languageCode
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToString(System.String,System.Boolean)">
            <summary>
            ToString for languageCode with getFirstValueIfNotExists option
            </summary>
            <param name="languageCode"></param>
            <param name="getFirstValueIfNotExists"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.op_Implicit(CommonUtils.Objects.LocalizableString)~System.String">
            <summary>
            User-defined conversion from LocalizableString to String 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.op_Implicit(System.String)~CommonUtils.Objects.LocalizableString">
            <summary>
            User-defined conversion from String to LocalizableString 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.op_Inequality(CommonUtils.Objects.LocalizableString,CommonUtils.Objects.LocalizableString)">
            <summary>
            operator !=
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.op_Equality(CommonUtils.Objects.LocalizableString,CommonUtils.Objects.LocalizableString)">
            <summary>
            operator ==
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.CompareTo(System.String)">
            <summary>
            CompareTo
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.Equals(System.String)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.CompareTo(System.Object)">
            <summary>
            CompareTo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.GetTypeCode">
            <summary>
            GetTypeCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToBoolean(System.IFormatProvider)">
            <summary>
            ToBoolean
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToChar(System.IFormatProvider)">
            <summary>
            ToChar
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToSByte(System.IFormatProvider)">
            <summary>
            ToSByte
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToByte(System.IFormatProvider)">
            <summary>
            ToByte
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToInt16(System.IFormatProvider)">
            <summary>
            ToInt16
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToUInt16(System.IFormatProvider)">
            <summary>
            ToUInt16
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToInt32(System.IFormatProvider)">
            <summary>
            ToInt32
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToUInt32(System.IFormatProvider)">
            <summary>
            ToUInt32
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToInt64(System.IFormatProvider)">
            <summary>
            ToInt64
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToUInt64(System.IFormatProvider)">
            <summary>
            ToUInt64
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToSingle(System.IFormatProvider)">
            <summary>
            ToSingle
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToDouble(System.IFormatProvider)">
            <summary>
            ToDouble
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToDecimal(System.IFormatProvider)">
            <summary>
            ToDecimal
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToDateTime(System.IFormatProvider)">
            <summary>
            ToDateTime
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToString(System.IFormatProvider)">
            <summary>
            ToString
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToType(System.Type,System.IFormatProvider)">
            <summary>
            ToType
            </summary>
            <param name="conversionType"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="P:CommonUtils.Objects.LocalizableString.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:CommonUtils.Objects.LocalizableString.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="P:CommonUtils.Objects.LocalizableString.OriginalString">
            <summary>
            OriginalString
            </summary>
        </member>
        <member name="P:CommonUtils.Objects.LocalizableString.CurrentLanguageKey">
            <summary>
            Текущий ключ языка.
            Двухбуквенный, например, ru, en, de.
            </summary>
        </member>
        <member name="P:CommonUtils.Objects.LocalizableString.StringCurrent">
            <summary>
            StringCurrent
            </summary>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.GetString(System.String,System.Boolean,System.String)">
            <summary>
            GetString
            </summary>
            <param name="s"></param>
            <param name="getFirstValueIfNotExists"></param>
            <param name="codeLanguage"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.SetString(System.String,System.String)">
            <summary>
            Метод для установки значения в указанном языке.
            Строка всегда дополняется штуками вроде "\u0010", даже если в строке присутствует всего один язык.
            </summary>
            <param name="languageKey"></param>
            <param name="text"></param>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.SetCurrentString(System.String)">
            <summary>
            Метод для установки значения в указанном языке.
            Строка всегда дополняется штуками вроде "\u0010", даже если в строке присутствует всего один язык.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.GetCurrentString(System.String)">
            <summary>
            Get current string by language key
            </summary>
            <param name="languageKey"></param>
        </member>
        <member name="P:CommonUtils.Objects.LocalizableString.Languages">
            <summary>
            Language codes in current string
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.Contains(System.String)">
            <summary>
            Contains
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.Replace(System.Char,System.Char)">
            <summary>
            Replace
            </summary>
            <param name="oldChar"></param>
            <param name="newChar"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.Replace(System.String,System.String)">
            <summary>
            Replace
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.Trim">
            <summary>
            Trim
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToLower">
            <summary>
            ToLower
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.ToUpper">
            <summary>
            ToUpper
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.IndexOf(System.String)">
            <summary>
            IndexOf
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.IndexOf(System.Char)">
            <summary>
            IndexOf
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CommonUtils.Objects.LocalizableString.IndexOf(System.String,System.StringComparison)">
            <summary>
            IndexOf
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="T:CommonUtils.RandomGenerator">
            <summary>
            Represents a pseudo-random number generator.
            </summary>
        </member>
        <member name="M:CommonUtils.RandomGenerator.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than System.Int32.MaxValue.</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue
            must be greater than or equal to zero.</param>
            <returns> A 32-bit signed integer greater than or equal to zero, and less than maxValue;
            that is, the range of return values ordinarily includes zero but not maxValue.
            However, if maxValue equals zero, maxValue is returned.</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue;
            that is, the range of return values includes minValue but not maxValue. If
            minValue equals maxValue, minValue is returned.</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateString(System.Int32)">
            <summary>
            Generate random string of specified length
            </summary>
            <param name="length">String length</param>
            <returns>Random string</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateInt(System.Int32,System.Int32)">
            <summary>
            Generate random integer in range
            </summary>
            <param name="min">Min value</param>
            <param name="max">Max value</param>
            <returns>Random integer</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateDouble(System.Double,System.Double)">
            <summary>
            Generate random double in range
            </summary>
            <param name="min">Min value</param>
            <param name="max">Max value</param>
            <returns>Random double</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateBool">
            <summary>
            Generate random boolean
            </summary>
            <returns>Random boolean</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateGuid">
            <summary>
            Generate random GUID
            </summary>
            <returns>Random GUID</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateDateTime(System.DateTime,System.DateTime)">
            <summary>
            Generate random DateTime in range
            </summary>
            <param name="minDate">Min date</param>
            <param name="maxDate">Max date</param>
            <returns>Random DateTime</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateEmail">
            <summary>
            Generate random email
            </summary>
            <returns>Random email</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GeneratePassword(System.Int32)">
            <summary>
            Generate random password
            </summary>
            <param name="length">Password length</param>
            <returns>Random password</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateAlphaString(System.Int32)">
            <summary>
            Generate random alphabetic string
            </summary>
            <param name="length">String length</param>
            <returns>Random alphabetic string</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.GenerateNumericString(System.Int32)">
            <summary>
            Generate random numeric string
            </summary>
            <param name="length">String length</param>
            <returns>Random numeric string</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.NextBytes(System.Int32)">
            <summary>
            Returns array of bytes with random numbers.
            </summary>
            <param name="length">Array length.</param>
            <returns>An array of bytes to contain random numbers.</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:CommonUtils.RandomGenerator.NextString(System.Int32)">
            <summary>
            Returns string with random chars.
            </summary>
            <param name="length">String length.</param>
            <returns>A string with random chars.</returns>
        </member>
        <member name="T:CommonUtils.Settings.Attributes.CryptAttribute">
            <summary>
            Указывает, должно ли свойство/поле шифроваться при сохранении
            </summary>
        </member>
        <member name="P:CommonUtils.Settings.Attributes.CryptAttribute.IsCrypt">
            <param name="isCrypt">Требуется ли шифрование</param>
        </member>
        <member name="T:CommonUtils.Settings.Attributes.DoNotSaveToFileAttribute">
            <summary>
            Указывает, что свойство/поле не записываться в файл настроек
            </summary>
        </member>
        <member name="T:CommonUtils.Settings.BaseSettings">
            <summary>
            Базовый класс для настроек приложения
            </summary>
        </member>
        <member name="T:CommonUtils.Settings.GlobalSettings">
            <summary>
            Глобальные настройки приложения, доступные всем модулям
            </summary>
        </member>
        <member name="P:CommonUtils.Settings.GlobalSettings.ProgramPath">
            <summary>
            Путь к исполняемому файлу программы (не сохраняется в файл настроек)
            </summary>
        </member>
        <member name="P:CommonUtils.Settings.GlobalSettings.ApiKey">
            <summary>
            API Key
            </summary>
        </member>
        <member name="P:CommonUtils.Settings.GlobalSettings.Theme">
            <summary>
            Текущая тема оформления
            </summary>
        </member>
        <member name="T:CommonUtils.Settings.SettingsContractResolver">
            <summary>
            Кастомный резолвер для сериализации настроек
            </summary>
        </member>
    </members>
</doc>
